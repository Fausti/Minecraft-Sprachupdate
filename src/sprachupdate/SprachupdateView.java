/*
 * SprachupdateView.java
 */

package sprachupdate;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.Timer;
import javax.swing.Icon;

/**
 * The application's main frame.
 */
public class SprachupdateView extends FrameView {

    public SprachupdateView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jStartButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLog = new javax.swing.JTextArea();

        mainPanel.setName("mainPanel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sprachupdate.SprachupdateApp.class).getContext().getActionMap(SprachupdateView.class, this);
        jStartButton.setAction(actionMap.get("startPatching")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sprachupdate.SprachupdateApp.class).getContext().getResourceMap(SprachupdateView.class);
        jStartButton.setText(resourceMap.getString("jStartButton.text")); // NOI18N
        jStartButton.setName("jStartButton"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jLog.setColumns(20);
        jLog.setEditable(false);
        jLog.setLineWrap(true);
        jLog.setRows(5);
        jLog.setText(resourceMap.getString("jLog.text")); // NOI18N
        jLog.setName("jLog"); // NOI18N
        jScrollPane1.setViewportView(jLog);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jStartButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jStartButton)
                .addContainerGap())
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void startPatching() throws URISyntaxException 
    {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sprachupdate.SprachupdateApp.class).getContext().getResourceMap(SprachupdateView.class);
        
        if  (!resourceMap.getString("jStartButton.text").equals(jStartButton.getText()))
        {
            this.getApplication().exit();
        }
        
        String dataLocation = getMinecraftDataLocation(jLog);
        String fileSeparator = System.getProperty("file.separator");
	String jarLocation = dataLocation + "bin" + fileSeparator + "minecraft.jar";
        String fileLocation = this.getClass().getClassLoader().getResource("lang/en_US.lang").getPath(); // getPath();
        String subDirectory = "lang";
        File theFile = new File(fileLocation);
        
        jLog.append("Pfad zur minecraft.jar:\n" + jarLocation + "\n");
        jLog.append("Pfad zur en_US.lang:\n" + fileLocation + "\n\n");
        
        jLog.append("Starte Patchvorgang...\n\n");
        
        FileInjector injector = new FileInjector(jarLocation, "/lang/en_US.lang", subDirectory);
        
        boolean success;
        
        try {
            success = injector.inject(jLog);
        } catch (IOException ex) {
            jLog.append("Fehler: " + ex.getLocalizedMessage() + "\n");
            success = false;
        }
        
        if (success)
        {
            //jStartButton.setEnabled(false);
            jStartButton.setText("Erfolgreich!");
            jLog.append("\nPatchvorgang erfolgreich!");
        }
        else
        {
            //jStartButton.setEnabled(false);
            jStartButton.setText("Fehler!");
            jLog.append("\nPatchvorgang abgebrochen!");
        }
    }
    
    private String getMinecraftDataLocation(javax.swing.JTextArea log)
    {
	String separator = System.getProperty("file.separator");
	String minecraftDir = "minecraft" + separator;
	String osName = System.getProperty("os.name").toLowerCase();
        log.append("Betriebssystem:\n" + System.getProperty("os.name") + " " + System.getProperty("os.arch") + " " + System.getProperty("os.version") + "\n");
        log.append("Java Version:\n" + System.getProperty("java.version") + "\n");
	if (osName.contains("win"))
	{
		minecraftDir = "." + minecraftDir;
		String applicationData = System.getenv("APPDATA");
		if (applicationData != null)
		{
			if (!applicationData.endsWith(separator))
				applicationData += separator;
			return applicationData + minecraftDir;
		}
	}
	String userHome = System.getProperty("user.home", ".");
	if (userHome != null && !userHome.endsWith(separator))
		userHome += separator;
	if (osName.contains("mac"))
		return userHome + "Library/Application Support/" + minecraftDir;
	else if (osName.contains("linux") || osName.contains("solaris"))
		minecraftDir = "." + minecraftDir;
	return userHome + minecraftDir;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea jLog;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jStartButton;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
}
